name: CI/CD Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Inject Angular secrets
        run: |
          cat <<EOF > accounting/src/environments/environment.ts
          export const environment = {
            production: true,
            serverUrl: '/api',
            keycloak: {
              server: '${{ secrets.KEYCLOAK_SERVER }}',
              clientId: '${{ secrets.KEYCLOAK_CLIENT_ID }}',
              realm: '${{ secrets.KEYCLOAK_REALM }}'
            }
          };
          EOF

      - name: Build with Maven
        run: mvn clean package

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
          docker build -t $IMAGE_NAME .

      - name: Push image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
          docker push $IMAGE_NAME

      - name: Upload docker-compose.yml to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/opt/myapp"

      - name: Deploy on VPS using Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            export IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            cd /opt/myapp
            docker pull $IMAGE_NAME
            docker compose down
            docker compose up -d